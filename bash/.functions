##################################
########### DOCKER ###############
##################################

# stop containers
function dsc {
  docker stop $(docker ps -aq)
}

# remove all stop containers
function drc {
 docker rm $(docker ps -aq)  
}

# remove images
function dri {
 docker image rm -f $(docker images -q) 
}
# remove(trim) dangling images 
function dti {
  docker image rm -f $(docker images -f "dangling=true" -q)
}

#watch docker ps
function wdps {
	watch 'docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Networks}}\t{{.Status}}"'
}

##################################
########### OTHER ################
##################################

#gnome lock 
function lc {
	clear
	dbus-send --type=method_call --dest=org.gnome.ScreenSaver /org/gnome/ScreenSaver org.gnome.ScreenSaver.Lock
}

# get permissions
function  perm {
  stat -c "%a %n" $1
}

#create dir and mv into dir 
function md() {
	mkdir -p "$@" && cd "$@"
}

#advance ls
function lal(){
 	ls -l  "$@" | awk '
    {
      k=0;
      for (i=0;i<=8;i++)
        k+=((substr($1,i+2,1)~/[rwx]/) *2^(8-i));
      if (k)
        printf("%0o ",k);
      printf(" %9s  %3s %2s %5s  %6s  %s %s %s\n", $3, $6, $7, $8, $5, $9,$10, $11);
    }'
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function decode() {
	echo "$1" | base64 --decode
}