##################################
########### DOCKER ###############
##################################

# stop containers
function dsc {
  docker stop $(docker ps -aq)
}

# remove all stop containers
function drc {
 docker rm -f $(docker ps -aq)  
}

# stop and force remove then restart a set of docker compose services  
function dkr {
 docker-compose  rm -sf $@ && docker-compose up -d $@
}

# remove(trim) dangling images 
function dti {
	docker rmi -f $(docker images -f "dangling=true" -q)
}

function dcu {
	dsc && printf "\n\n" && drc && printf "\n\n" && dti && printf "\n\n"
}

# Remove all images or remove images based on an arg in image name/tag
function dri {
	dti 2>/dev/null
	if [[ $# -gt 0 ]] ; then
		for var in "$@" ; do
			docker rmi -f $( docker images --format "{{.Repository}}" | grep $var)  2>/dev/null
			docker rmi -f $( docker images --format "{{.ID}}" | grep $var)  2>/dev/null
		done
	else
		docker image rm -f $(docker images -q)
	fi
}

#watch docker ps
function wdps {
	if [[ $# -eq 1 ]] && [[ $1 == 'c' ]] ; then
		watch -t docker-compose ps
	else 
		watch -t 'docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Networks}}\t{{.Status}}"'
	fi 
}

#output logs from docker-compose service

function dcl {
	docker-compose logs --no-color $1 | sed -e "s/$1[ \s]\+|\ //g"  > service-$1.logs
}

##################################
########### OTHER ################
##################################

#ls when cd'ing
function cd {
	[ -z "$PS1" ] && return
	builtin cd "$@" && ls -A --file-type
}

# get permissions
function  perm {
  stat -c "%a %n" $1
}

#create dir and mv into dir 
function md() {
	mkdir -p "$@" && cd "${@: -1}"
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

function decode() {
	echo "$1" | base64 --decode
}

function utar(){
	tar -xzf $@
}

function cgi() {
	touch .gitignore
}

man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}